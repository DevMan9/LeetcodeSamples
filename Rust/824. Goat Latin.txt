use std::collections::HashSet;

impl Solution {
    pub fn to_goat_latin(sentence: String) -> String {
        //Create a HashSet if the vowels
        let vowels = HashSet::from(['a','A','e','E','i','I','o','O','u','U']);

        //Split the sentence into words
        let words = sentence.split(" ");

        //Initialize the return string
        let mut ret: String = String::from("");

        //Initialize the suffix
        let mut suf: String = String::from("ma");

        //Iterate through the words in sentence
        for word in words {
            //Append an 'A' to the suffix every word
            suf.push('a');

            //If the first letter in word is a vowel
            if vowels.contains(&(word.chars().nth(0).unwrap())) {
                //Then simply push the word
                ret.push_str(word);
            }else{
                //Else push the word except the first letter
                ret.push_str(&word[1..]);
                //Then push the first letter
                ret.push(word.chars().nth(0).unwrap());
            }
            
            //Push the suffix
            ret.push_str(&suf);

            //Add a space to separate words
            ret.push_str(" ");
        }

        //There is an extra space at the end
        //by nature of how we reconstructed the sentence
        //Remove it
        ret.truncate(ret.len() - 1);

        //Return the goat latin sentence
        return ret;
    }
}