class Solution {
public:
    int longestValidParentheses(std::string s) {
        int max = 0;
        int forward_depth = 0;
        int backward_depth = 0;
        int forward_size = 0;
        int backward_size = 0;
        for(int i = 0;i<s.length();i++){
            forward_depth+=(s[i]=='(')?1:-1;
            backward_depth+=(s[s.length()-1-i]==')')?1:-1;
        
            if(forward_depth<0){
                forward_size = 0;
                forward_depth = 0;
            }else{
                forward_size++;
                if(forward_depth==0){
                    max = (max<forward_size)?forward_size:max;
                }
            
            }
        if(backward_depth<0){
                backward_size = 0;
                backward_depth = 0;
            }else{
                backward_size++;
                if(backward_depth==0){
                    max = (max<backward_size)?backward_size:max;
                }
            
            }
        }
        return max;
    }
};