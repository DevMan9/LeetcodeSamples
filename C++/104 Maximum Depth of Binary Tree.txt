/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        //If the root node is null
        //then return 0 because the tree has no depth
        if(!root){
            return 0;
        }
        
        //Get the depth of the left and right sub trees
        int left = maxDepth(root->left);
        int right = maxDepth(root->right);
        
        //Return the larger of the two sub tree depths plus 1
        //the plus 1 accounts for this node
        return 1+((left>right)?left:right);
    }
};