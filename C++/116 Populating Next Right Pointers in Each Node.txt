/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        //If the tree is NOT valid 
        //then do nothing
        //also, because the tree is a perfect tree
        //if the tree doesn't have a left branch then it is a leaf
        //so do nothing as well
        if(root&&root->left){
            //Link the left branch to the right branch
            root->left->next = root->right;
            
            //If the tree has a right branch
            //and this tree has a next tree
            //then link the right branch to the next tree's left branch
            if(root->next&&root->right){
                root->right->next = root->next->left;
            }
            
            //connect the left and right subtrees
            connect(root->left);
            connect(root->right);
        }
        
        //Return the root of this tree
        return root;
    }
};