/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //Returns a subtree given more information than the other buildTree function
    //preorder - a vector containing the preorder traversal of the tree nodes
    //inorder - a vector containing the inorder traversal of the nodes
    //index_map - a map from the indices of preorder to inorder
    //for example, given
    //              [0,1,2, 3, 4]
    //preorder =    [3,9,20,15,7] and
    //inorder =     [9,3,15,20,7]
    //index_map =   [1,0,3, 2, 4]
    //index - the current preorder index we are working on
    //(the root node of the subtree)
    //start - the begining of the subtree data in inorder
    //end - the end of the subtree data in inorder
    TreeNode* buildTree(std::vector<int>& preorder, std::vector<int>& inorder, std::vector<int>& index_map,int index, int start, int end) {
        //Calculate the sizes of the left and right subtrees
        int left_size = index_map[index]-start;
        int right_size = end-index_map[index];

        //Initialize variables to store the left and right subtrees
        TreeNode* left = nullptr;
        TreeNode* right = nullptr;

        //If the left subtree is at least one node
        //then generate the left subtree
        if(left_size){
            left = buildTree(preorder, inorder, index_map, index+1, start, index_map[index]-1);
        }

        //If the right subtree is at least one node
        //then generate the right subtree
        if(right_size){
            right = buildTree(preorder, inorder, index_map, index+left_size+1, index_map[index]+1, end);
        }

        //Return the subtree rooted at preorder[index]
        return new TreeNode(preorder[index],left,right);
    }

    //Mirrors a given tree
    TreeNode* mirrorTree(TreeNode* root){
        if (root) {
            //Swap the left and the right branches
            root->left = (TreeNode*)((uint64_t)root->left ^ (uint64_t)root->right);
            root->right = (TreeNode*)((uint64_t)root->left ^ (uint64_t)root->right);
            root->left = (TreeNode*)((uint64_t)root->left ^ (uint64_t)root->right);
            
            //Mirror the left and the right subtrees
            mirrorTree(root->left);
            mirrorTree(root->right);
        }
        
        //Return the tree for nesting calls
        return root;
    }

    TreeNode* buildTree(std::vector<int>& inorder, std::vector<int>& postorder) {
        //Reverse the inorder and the post order
        //We will be reusing the preorder code for simplicity
        std::reverse(inorder.begin(), inorder.end());
        std::reverse(postorder.begin(), postorder.end());

        //Put inorder into a map for quick lookup
        std::unordered_map<int, int> inorder_map;
        for(int i = 0; i < inorder.size(); i++){
            inorder_map[inorder[i]] = i;
        }

        //Put the index that each element of preorder
        //appears in inorder into a vector for quick lookup
        std::vector<int> index2index(postorder.size());
        for(int i = 0; i < postorder.size(); i++){
            index2index[i] = inorder_map[postorder[i]];
        }

        //Return the built tree but mirror it
        return mirrorTree(buildTree(postorder, inorder, index2index, 0, 0, postorder.size()-1));
    }
};