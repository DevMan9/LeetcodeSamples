class Solution {
public:
    double myPow(double x, int n) {
        //If n is negative
        //Then call myPow on the reciprocal of x and the inverse of n
        if(n<0){
            //Minimum int edge case causes overflow when inverting
            if(n==-2147483648){
                //apply one iteration of squaring
                //Then call myPow on the reciprocal of x with positive n-1
                return myPow((1/x)*(1/x), 0-(n+1));
            }else{
                //Call myPow on the reciprocal of x and the inverse of n
                return myPow(1/x, 0-n);
            }
        //If n is zero, 
        //then x^0 = 1
        //so return 1
        }else if(n==0){
            return 1;
        //If n is one, 
        //then x^1 = x
        //so return x   
        }else if(n==1){
            return x;
        }
        //n is greater than 1
        //return myPow(x^2, n/2) muliplied by myPow(x, n%2)
        //x^6 = (x^2)^3
        //if there was a remainder when dividing n by 2
        //we account for that my multiplying by myPow(x, n%2)
        return myPow(x*x, n/2)*myPow(x, n%2);   
    }
};