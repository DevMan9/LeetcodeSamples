bool isMatch(std::string s, std::string p) {
    //store the lengths of input string s and p into variables
    int test_size = (int)s.length();
    int pattern_size = (int)p.length();
    
    //initialize a 2D boolean vector of size n+1, m+1
    //when matching a string with no '*' wildcards
    //every value across the diagonal will be true
    //though technically it only matters that the final value of
    //the nth,mth index be true.
    std::vector<std::vector<bool>> truth_table(test_size+1,std::vector<bool>(pattern_size+1));
    
    //set the origin to true
    truth_table[0][0] = true;
    
    //set the first column to false
    //i.e. if s contains a character and p does not
    for(int i = 1; i <= test_size; i++){
        truth_table[i][0] = false;
    }
    
    //initialize a flag
    bool flag = true;
    
    //loop through the pattern string starting at the second index
    //checking if the previous index was a '*'
    //this will fill the first row with true until a non '*' is encountered
    for(int i = 1; i <= pattern_size; i++){
        if(p[i-1]!='*'){
            flag = false;
        }
        truth_table[0][i] = flag;
    }
    
    //loop through the test string
    for(int i=1;i<=test_size;i++)
    {
        //loop through the pattern string
        for(int j=1;j<=pattern_size;j++)
        {
            //if the i'th character in the test string
            //matches the j'th character of the pattern string
            //or the j'th character of the pattern string is a '?' wildcard
            //then set the i'th, j'th index to the (i-1)'th, (j-1)'th value
            //(pull value from the top left direction)
            if(s[i-1]==p[j-1] || p[j-1]=='?'){
                truth_table[i][j] = truth_table[i-1][j-1];
            //if the i'th character in the pattern string is a '*' wildcard
            //then pull the value from the row above, or the column to the left
            }else if(p[j-1]=='*'){
                truth_table[i][j] = truth_table[i-1][j] || truth_table[i][j-1];
            //else set the current index to false
            }else{
                truth_table[i][j]=false;
            }
        }
    }
    
    //return the bottom right corner of the table
    return truth_table[test_size][pattern_size];
}