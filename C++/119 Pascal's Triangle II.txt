class Solution {
public:
    //Returns the greatest common denominator between a and b
    int gcd(int a, int b) {
        if (b == 0){
            return a;
        }else{
            return gcd(b, a % b);
        }
    }

    //Returns n choose m 
    int microchoose(int n, int m){
        //If n is less than m
        //the swap them for simplicity
        if(n<m){
            m^=n;
            n^=m;
            m^=n;
        }
        
        //Initialize a vector to store the terms of the n!/m!
        //7!/3! is
        //(7*6*5*4*3*2*1)/(3*2*1)  ... the 3*2*1 cancel to leave
        //7*6*5*4 which is what get's stored in this vector
        std::vector<int> vec(n-m);
        for (int i = n; i>m; i--) {
            vec[n-i]=i;
        }

        //Divide out the integers from 2 to (n-m) from the vector
        for (int i = 2; i<=(n-m); i++) {
            //Initialize a variavle to store the 
            //value that still needs to be divided
            int rem = i;
            
            //Iterate through the terms vector, factoring out rem
            for (int j = 0; j<vec.size(); j++) {
                //Calculate the greatest common denominator 
                //between rem and this term
                int d = gcd(rem, vec[j]);
                
                //Divde rem by this gcd
                rem/=d;
                
                //Divide the current term by this gcd
                vec[j]/=d;
                
                //If rem is 1 
                //then there is nothing left to factor
                //so skip the remaining terms
                if (rem==1) {
                    break;
                }
            }
        }

        //Initialize a return vector
        //We will be multiplying interatively into this
        //so initialize it to 1
        int ret = 1;
        
        //Multiply the factored terms
        for (int i = 0; i<vec.size(); i++) {
            ret*=vec[i];
        }

        //Return n choose m
        return ret;
    }
    
    vector<int> getRow(int rowIndex) {
        //Initialize the return vector
        //there are row + 1 terms in a given row
        vector<int> ret(rowIndex+1);
        //Calculate the row using the choose function
        for(int i = 0; i<= rowIndex; i++){
            ret[i] = microchoose(rowIndex,i);
        }
        
        //Return the return vector
        return ret;
    }
};