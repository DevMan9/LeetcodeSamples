/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //Returns a balanced bst from the sub array from [start,end] in nums
    TreeNode* sortedArrayToBSTHelper(std::vector<int>& nums,int start,int end) {
        //if start and end are equal
        //then we have exactly 1 node
        //so return a new TreeNode holding the value in nums at start
        if(start==end){
            return new TreeNode(nums[start]);
            
        //If end comes before start
        //then we have no nodes
        //so return a nullptr
        }else if (end-start<0){
            return nullptr;
        }

        //Calculate the index directly in the middle of start and end
        //Ties tend toward start
        int mid = start+(end-start)/2;

        //Calculate the left and right branches if the bst and 
        //combine them with the value at mid to create a larger bst
        return new TreeNode(nums[mid],sortedArrayToBSTHelper(nums, start, mid-1),sortedArrayToBSTHelper(nums, mid+1, end));
    }
    
    //Converts a sorted array to a BST
    TreeNode* sortedArrayToBST(std::vector<int>& nums) {
        //Call the helper with additional information for recursion
        return sortedArrayToBSTHelper(nums,0,nums.size()-1);
    }
    
    TreeNode* sortedListToBST(ListNode* head) {
        //Convert the list into a vector
        //We have to access each element at least once anyway
        //So there is no harm in doing it twice
        std::vector<int> nums;
        for(ListNode* node = head; node; node = node->next){
            nums.push_back(node->val);
        }
        
        //Convert the array into a BST and return it
        return sortedArrayToBST(nums);
    }
};