/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //A helper function which modifies a given output variable to produce a
    //levelOrder vector of the given tree
    //index stores the depth of a given node
    void levelOrder(TreeNode* root, vector<vector<int>>& out, int index) {
        //If the root is a valid node
        //then add the root's value to the output vector at the given index
        if(root){
            //Add enough elements to the output vector
            //so that root can be added at index without error
            while(index >= out.size()){
                out.push_back({});
            }
            //Push the root value into the vector at the given index
            out[index].push_back(root->val);
            
            //Do the same for the left and right branches
            //but with an increased index
            levelOrder(root->left,out,index+1);
            levelOrder(root->right,out,index+1);
        }
    }
    
    vector<vector<int>> levelOrder(TreeNode* root) {
        //Initialize the output vector
        vector<vector<int>> out;
        
        //Populate the output vector with the values from the input tree
        //in levelOrder
        levelOrder(root,out,0);
        
        //Return the output vector
        return out;
    }
    
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        //Create a levelOrder vector from the input tree
        vector<vector<int>> ret = levelOrder(root);
        //Initialiaze a varaible to store 
        //whether this vector should be forward or not
        bool forward = true;
        
        //Iterate through the return vector and reverse every other vector
        for(vector<int>& vec : ret){
            //If this vector should not be forward
            //then reverse it
            if(!forward){
                std::reverse(vec.begin(),vec.end());
            }
            
            //Invert the forward flag
            //If this vector was forward, the next should be backwards
            //and vice versa
            forward = !forward;
        }
        
        //Return the return vector
        return ret;
    }
};