class Solution {
public:
int bs(std::vector<int>* nums, int target, int start, int end){
    // std::cout<<start<<","<<end<<std::endl;
    if(start==end){
        if(target==(*nums)[start]){
            return start;
        }else{
            return -1;
        }
    }
    int mid = start+(end-start)/2;
    
    if(target > (*nums)[mid]){
        return bs(nums,target,mid+1,end);
    }else{
        return bs(nums,target,start,mid);
    }
}

int findPivot(std::vector<int>* nums,int start, int end){
    // std::cout<<start<<","<<end<<std::endl;
    if(start==0&&end==nums->size()-1&&(*nums)[start]<(*nums)[end]){
        return 0;
    }
    
    if(end-start==1){
        return end;
    }
    
    int mid = start+(end-start)/2;
    
    if((*nums)[mid]>(*nums)[start]){
        return findPivot(nums, mid, end);
    }else{
        return findPivot(nums, start, mid);
    }
}

int search(std::vector<int>& nums, int target) {
    if(nums.size()==1){
        if(nums[0]==target){
            return 0;
        }else{
            return -1;
        }
    }
    
    if(nums.size()==2){
        if(nums[0]==target){
            return 0;
        }else if(nums[1]==target){
            return 1;
        }else{
            return -1;
        }
    }
    
    
    
    int start = findPivot(&nums, 0, nums.size()-1);
    // std::cout<<start<<std::endl;
    int end = (start)?start-1:nums.size();
    
    if(target>=nums[0]){
        start = 0;
    }else{
        end = nums.size()-1;
    }
    
    
    
    return bs(&nums,target,start,end);
}
};