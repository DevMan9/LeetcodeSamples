/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //This function finds the first and last error nodes in a BST
    //and stores them in first and last respectivly
    //by traversing the tree in order
    //Traversing a BST in order should 
    //access the nodes from least to greatest value
    void findNodes(TreeNode* root, TreeNode*& previous, TreeNode*& first, TreeNode*& last){
        //If the root is not a null pointer
        //then search it's left and right branches for erroneous nodes
        if(root != nullptr){
            
            //Search the left branch for erroneous nodes
            findNodes(root->left, previous, first, last);
            
            //If the previously accessed node (in order) is greater than this node
            //then then the previous node and this current node are out of order
            //so store the previous node and the current node
            //in first and last repectively
            if(previous->val > root->val){
                //To preserve the first node
                //we will only store the first of an out of order previous node
                if(first == nullptr){
                    first = previous;
                }
                
                //Store the current node in last
                last = root;
            }
            
            //All operations for this step of inorder traversal are complete
            //Store the current node as the previous node
            previous = root;
            
            //Serach the right branch for out of order nodes
            findNodes(root->right, previous, first, last);
        }
    }

    void recoverTree(TreeNode* root) {
        //Initialize a variable to store the previously accessed node
        //during an in order traversal
        //We initialize it to a placeholder node holding the minimum int value 
        //to handle some edge cases
        TreeNode *previous = new TreeNode(std::numeric_limits<int>::min());
        
        //Initialize variables to store the first and last erroneous nodes
        TreeNode *first = nullptr, *second = nullptr;
        
        //Find the first and last erroneous nodes in the input tree
        findNodes(root,previous,first,second);

        //If first and second are equal
        //then they are either the exact same node, 
        //thus swapping them would do nothing
        //or they are both nullptr 
        //which will throw errors when accesing member variables
        //So, as long as first and second are not equal
        //then swap their values
        if(first!=second){
            first->val ^= second->val;
            second->val ^= first->val;
            first->val ^= second->val;
        }
    }
};