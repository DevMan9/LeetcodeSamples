class Solution {
public:
    std::string getPermutation(int n, int k) {
        //Make k 0 indexed
        k--;
        
        //Initialize a palette containing the base permutation
        //(a vector {1...n})
        std::vector<int> palette;

        //Initialize a variable to store a factorial up to n-1
        //this variable will be used when calculating which element to use
        //when building a specific permutation
        //For example
        //2431 is a permutation of 1234
        //there are exactly 4*3*2*1 permutations of 1234
        //of those there are 3*2*1 that start with 1,2,3, and 4
        //so there's 0*3*2*1 before the first that starts with 1
        //there's 1*3*2*1 before the first that starts with 2
        //there's 2*3*2*1 before the first that starts with 3
        //there's 3*3*2*1 before the first that starts with 4
        //so by dividing k by the previous factorial
        //you get the element that the kth permutation uses
        int f = 1;
        
        //Calculate the factorial
        //Simlutaneously fill the palette
        for(int i = 1;i<n;i++){
            f*=i;
            palette.push_back(i);
        }
        
        //We only looped to n-1
        //Push n into the palette
        palette.push_back(n);

        //Initialize a string builder
        std::ostringstream os;
        
        //iteratievly pick an element from palette to build the permutation
        while(n>1){
            //Calculate which palette element to choose
            int choose = k/f;
            
            //Push the chosen element into the string builder
            os<<palette[choose];

            //Erase the element from the palette
            //We don't want to pick it again
            palette.erase(palette.begin()+choose);
            
            //Calculate the remainder of k for the next element
            k=k%f;
            
            //Calculate the previous factorial
            f/=n-1;
            
            //Decrement n
            n--;
        }
        
        //Only one element remains in palette
        //Push it into the string builder
        os<<palette[0];
        
        //Return the built string
        return os.str();
    }
};