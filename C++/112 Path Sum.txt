/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        //If root is a valid tree node
        //then check it for the given path sum
        //Invalid nodes return false
        if(root){
            //If root is a leaf node
            //then check if the remaining sum is in the node
            //else subtract the current node from the sum and check the subtrees
            if(root->left==root->right){
                return targetSum==root->val;
            }else{
                return hasPathSum(root->left,targetSum-root->val)||hasPathSum(root->right,targetSum-root->val);
            }
        }else{
            return false;
        }
    }
};