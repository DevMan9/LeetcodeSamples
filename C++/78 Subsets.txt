class Solution {
public:
    std::vector<std::vector<int>> combine(int n, int k) {
        //Initialize the return vector
        std::vector<std::vector<int>> ret;

        //Initialize a variable to store the index
        //We will be building each choose digit by digit
        int index = 0;

        //Initialize a vector to store the chosen
        std::vector<int> combination(k,0);

        //Repeat until index is less than 0
        //because of the way we are constructing numbers
        //this will occur when the combination vector is filled with n+1
        while (index >= 0){
            //Increment the value at index
            combination[index]++;

            //If the value at index is greater than n
            //then this index is at the max value it can be
            //so move back an index and increment that one
            if (combination[index] > n){
                index--;

            //If index is at the end of combination
            //then this choose is complete
            //so push it into the return vector
            }else if (index >= k - 1){
                ret.push_back(combination);

            //The current index is not maxed
            //nor are we working on te last element
            //so move to the next index
            //since we are choosing numbers in order
            //we copy the value at the previuos index into the current index
            //and then start incrementing from there
            }else{
                index++;
                combination[index] = combination[index - 1];
            }
        }

        //Return the return vector
        return ret;
    }

    std::vector<std::vector<int>> subsets(std::vector<int>& nums) {
        //Initialize the return vector
        std::vector<std::vector<int>> ret = {{}};

        //Iterate through the possible combinations of indexes
        //then build a vector uning the values at the indices
        //skipping 0 for simplicity (It's already in the return vector)
        for(int i = 1; i <= nums.size(); i++){
            //Genereate the set of combinations for picking i elements from n
            std::vector<std::vector<int>> keys = combine(nums.size(), i);

            //for every combination in keys
            //get the corresponding element in nums and store
            for(std::vector<int> permute:keys){
                //Iterate through the permutation and map the values
                //in nums back to the indicies in permute
                for (int i = 0; i < permute.size(); i++) {
                    permute[i] = nums[permute[i]-1];
                }
                
                //Push the permutation into the return vector
                ret.push_back(permute);
            }
        }

        //Return the return vector
        return ret;
    }
};